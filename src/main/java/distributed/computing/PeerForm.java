/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package distributed.computing;

import distributed.computing.appender.JTextAreaAppender;
import distributed.computing.bootstrap.Bootstrap;
import distributed.computing.bootstrap.BootstrapShutdownHook;
import distributed.computing.bootstrap.response.RegResponse;
import distributed.computing.config.BootstrapServerConfig;
import distributed.computing.config.NodeContext;
import distributed.computing.domain.model.FileManager;
import distributed.computing.domain.model.PeerNode;
import distributed.computing.listner.Listener;
import distributed.computing.listner.UdpListener;
import distributed.computing.messaging.broadcast.MessageCache;
import distributed.computing.util.PeerNodeObserver;
import distributed.computing.util.SearchUtil;
import distributed.computing.util.Utils;
import java.awt.Color;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;

/**
 *
 * @author yasitham
 */
public class PeerForm extends javax.swing.JFrame implements PeerNodeObserver{

    private static final Logger LOGGER = LogManager.getLogger(PeerForm.class.getName());


    /**
     * Creates new form PeerForm
     */
    public PeerForm() {
        initComponents();
        JTextAreaAppender.addTextArea(this.logTxtArea);
        txtNodeIp.setText(Utils.getIP());
        NodeContext.tellMeWhenChildChanged(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        bsIP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bsPort = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        NodePort = new javax.swing.JTextField();
        applyButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        NodeName = new javax.swing.JTextField();
        bsRegButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        keyWord = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLocalFileNames = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        logTxtArea = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        peerName1 = new javax.swing.JLabel();
        peerName2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtNodeIp = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        spTtl = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Peer Properties");
        setName("PeerConfig"); // NOI18N

        jLabel1.setText("BS IP:");

        bsIP.setEnabled(false);
        bsIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsIPActionPerformed(evt);
            }
        });

        jLabel2.setText("BS Port:");

        bsPort.setEnabled(false);

        jLabel3.setText("Node Port:");

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Node Name:");

        bsRegButton.setText("Register");
        bsRegButton.setEnabled(false);
        bsRegButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsRegButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Peer 1:");

        jLabel6.setText("Peer 2:");

        jLabel7.setText("Key Word:");

        keyWord.setEnabled(false);

        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resultArea.setEditable(false);
        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        jLabel8.setText("Result:");

        txtLocalFileNames.setEditable(false);
        txtLocalFileNames.setColumns(20);
        txtLocalFileNames.setRows(5);
        txtLocalFileNames.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtLocalFileNamesCaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(txtLocalFileNames);

        logTxtArea.setEditable(false);
        logTxtArea.setBackground(new java.awt.Color(1, 1, 1));
        logTxtArea.setColumns(20);
        logTxtArea.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        logTxtArea.setForeground(new java.awt.Color(82, 181, 97));
        logTxtArea.setRows(5);
        logTxtArea.setLineWrap(true);
        logTxtArea.setWrapStyleWord(true);
        logTxtArea.setEditable (false);
        jScrollPane3.setViewportView(logTxtArea);
        jScrollPane3.setVisible(true);

        jLabel9.setText("File names");

        jLabel10.setText("Log");

        jButton1.setText("Clear files");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel11.setText("Node IP:");

        lblStatus.setBackground(new java.awt.Color(158, 158, 158));
        lblStatus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(101, 101, 101));
        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStatus.setText("OFFLINE");
        lblStatus.setFocusable(false);
        lblStatus.setOpaque(true);

        spTtl.setModel(new javax.swing.SpinnerNumberModel(5, 0, null, 1));

        jLabel12.setText("TTL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(NodeName, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                    .addComponent(bsIP))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNodeIp)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(NodePort, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18)
                                                .addComponent(bsPort, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(bsRegButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(33, 33, 33)
                                                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(46, 46, 46))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addGap(4, 4, 4)
                                                .addComponent(spTtl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(searchButton)
                                                .addGap(324, 324, 324))))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(keyWord, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jButton2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(peerName1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                                    .addComponent(peerName2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 669, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(NodePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applyButton)
                    .addComponent(jLabel4)
                    .addComponent(NodeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtNodeIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(bsIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(14, 14, 14))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(bsPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bsRegButton))
                            .addGap(18, 18, 18)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(peerName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(peerName2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(keyWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchButton)
                                .addComponent(spTtl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(2, 2, 2)
                                .addComponent(jButton2)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bsIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bsIPActionPerformed

    private void bsRegButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsRegButtonActionPerformed
        String bsIpStr = bsIP.getText();
        String bsPortStr = bsPort.getText();
        
        boolean valid = true;
        if (bsIpStr.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Bootstrap IP cannot be empty");
            valid = false;
        }
        
        if (bsPortStr.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Bootstrap Port cannot be empty");
            valid = false;
        }
         
        try{
           int intBsPort = Integer.parseInt(bsPortStr);
           if (!(intBsPort >= 1024 && intBsPort <= 65535)) {
                JOptionPane.showMessageDialog(rootPane, "Bootstrap Port should be a valid port number (1024 - 65535)");
                valid = false;
           }
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Bootstrap Port should be a valid port number (1024 - 65535)");
            valid = false;
        }
        
        if (valid) {
            BootstrapServerConfig.setHost(bsIP.getText());
            BootstrapServerConfig.setPort(Integer.parseInt(bsPort.getText()));
            LOGGER.info("BS IP: " + bsIP.getText() + ", BS Port: " +  bsPort.getText());

            Listener udpListener = UdpListener.getInstance();
            udpListener.initListener(NodeContext.getPort());

            if (!NodeContext.isOnline()) {
                //if offline

                RegResponse regResponse = null;
                try {
                    regResponse = Bootstrap.register();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(rootPane, "Registration failed!, " + e.getMessage());
                }
                if(regResponse.isRegOk()) {
                    bsRegButton.setText("Unregister");
                    NodeContext.setOnline(true);
                    lblStatus.setText("ONLINE");
                    lblStatus.setForeground(Color.GREEN);
                    lblStatus.setBackground(new Color(91, 128, 92));
                    
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Registration failed!, " + regResponse.getStatusMessage());
                }
            } else {
                //if online
                if(Bootstrap.unregister()) {
                    bsRegButton.setText("Register");
                    NodeContext.setOnline(false);
                    lblStatus.setText("OFFLINE");
                    lblStatus.setForeground(Color.GRAY);
                    lblStatus.setBackground(Color.LIGHT_GRAY);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Failed to unregister");
                }
            }
            
            Runtime.getRuntime().addShutdownHook(new BootstrapShutdownHook());
            MessageCache.initCachingScheduler();//init caching scheduler
            
            keyWord.setEnabled(true);
            searchButton.setEnabled(true);
            resultArea.setEnabled(true);
            txtLocalFileNames.setEnabled(true);
            txtLocalFileNames.setEditable(valid);
            NodeContext.setIp(txtNodeIp.getText());
            
            
        }
        
        
    }//GEN-LAST:event_bsRegButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        String nodePortStr = NodePort.getText();
        String nodeNameStr = NodeName.getText();
        
        boolean valid = true;
        if (nodeNameStr.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Node name cannot be empty");
            valid = false;
        }
        
        if (nodeNameStr.contains(" ")){
            JOptionPane.showMessageDialog(rootPane, "Node name should be a single word");
            valid = false;
        }
        
        if (nodePortStr.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Node port cannot be empty");
            valid = false;
        }
        
        try{
           int intPort = Integer.parseInt(nodePortStr);
           if (!(intPort >= 1024 && intPort <= 65535)) {
                JOptionPane.showMessageDialog(rootPane, "Node port should be a valid port number (1024 - 65535)");
                valid = false;
           }
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Node port should be a valid port number (1024 - 65535)");
            valid = false;
        }
        if (valid) {
            NodeContext.setIp(txtNodeIp.getText());
            NodeContext.setPort(Integer.parseInt(NodePort.getText()));
            NodeContext.setUserName(NodeName.getText()); 
            LOGGER.info("Node Name: "+ NodeName.getText() + ", Node IP: "+  Utils.getIP()+", Node Port:"+ NodePort.getText());
            bsIP.setEnabled(true);
            bsPort.setEnabled(true);
            bsRegButton.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_applyButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        resultArea.setText("");
        SearchUtil.search(keyWord.getText(), (int) spTtl.getValue());
    }//GEN-LAST:event_searchButtonActionPerformed

    private void txtLocalFileNamesCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtLocalFileNamesCaretUpdate
        fileNamesUpdate();
    }//GEN-LAST:event_txtLocalFileNamesCaretUpdate

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtLocalFileNames.setText("");
        FileManager.clear();
        LOGGER.debug("cear files");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        resultArea.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed
   
    public static void addSearchResult(String fileName, String location) {
        synchronized(resultArea) {
            resultArea.setText(resultArea.getText() + location + " : " + fileName + "\n");
        }        
    }
    
    public static void clearSearchResult() {
        synchronized(resultArea) {
            resultArea.setText("");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PeerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PeerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PeerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PeerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PeerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NodeName;
    private javax.swing.JTextField NodePort;
    private javax.swing.JButton applyButton;
    private javax.swing.JTextField bsIP;
    private javax.swing.JTextField bsPort;
    private javax.swing.JButton bsRegButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField keyWord;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextArea logTxtArea;
    private javax.swing.JLabel peerName1;
    private javax.swing.JLabel peerName2;
    private static javax.swing.JTextArea resultArea;
    private javax.swing.JButton searchButton;
    private javax.swing.JSpinner spTtl;
    private javax.swing.JTextArea txtLocalFileNames;
    private javax.swing.JTextField txtNodeIp;
    // End of variables declaration//GEN-END:variables


    public void fileNamesUpdate() {
        
        String fileNames = txtLocalFileNames.getText();
        if (!fileNames.isEmpty()) {
            FileManager.clear();
            if (fileNames.trim().contains("\n")) {
                String fileNamesArr[] = fileNames.split("\n");
                for(String fileName : fileNamesArr) {
                    FileManager.addFile(fileName);
                    LOGGER.debug("local file: {}", fileName.trim());
                }
            } else {
                FileManager.addFile(fileNames);
                LOGGER.debug("local file: {}", fileNames.trim());
            }
            LOGGER.debug("Files updated");
        }
        
    }

    @Override
    public void onChildChanged(List<PeerNode> children) {
        if (children.isEmpty()) {
            peerName1.setText("");
            peerName2.setText("");
        }
        int i = 0;
        for (PeerNode node : NodeContext.getChildren()) {
            if (i == 0)
                peerName1.setText(node.getUsername());
            else if (i == 1) {
                peerName2.setText(node.getUsername());
            }
            i++;
        }
    }
}
